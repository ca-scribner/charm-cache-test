name: Build with actions/cache directly

on:
  push:

jobs:

  tests:
    name: Build the charm
    runs-on: ubuntu-20.04
    env:
      CRAFT_SHARED_CACHE: /home/runner/.cache/shared_charmcraft_cache

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - uses: canonical/setup-lxd@main
      with:
        channel: latest/stable

    - name: install charmcraft
      run: |
        sudo snap install charmcraft --classic

    - name: emit pip cache directory contents
      run: |
        find $CRAFT_SHARED_CACHE | wc -l
        find $CRAFT_SHARED_CACHE/wheels | wc -l

    # Pack a charm using a cache
    - name: Setup Charmcraft's cache
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ env.CRAFT_SHARED_CACHE }}
        # Cache keys must be unique - there is no overwrite mechanic.  Add IDs to avoid this (is there a better set of IDs?)
        # partial ref: https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
        # To match the most recent previous cache, use restore-keys with the craft-shared-cache prefix.  This will hit the
        # "first" match, which will be from the most recent run.  
        # ref: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        key: craft-shared-cache-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ strategy.job-index }}
        restore-keys: craft-shared-cache

    - name: emit pip cache directory contents
      run: |
        find $CRAFT_SHARED_CACHE | wc -l
        find $CRAFT_SHARED_CACHE/wheels | wc -l

    - name: pack charm
      run: |
        charmcraft clean --verbosity debug # to be sure we dont have a container
        time charmcraft pack --verbosity debug

    - name: emit pip cache directory contents
      run: |
        find $PIP_CACHE_DIR | wc -l
        find $PIP_CACHE_DIR/wheels | wc -l

